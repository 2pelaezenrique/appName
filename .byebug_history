continue
CONTINUE
Material.find(params[:id]).favorites.where({user_id: current_user.id}).count
Material.find(params[:id]).favorites.where({user_id: current_user.id}).COUNT
Material.find(params[:id]).favorites.where({user_id: current_user.id})
continue
Material.find(params[:material_id]).favorites.where({user_id: current_user.id}).first
Material.find(params[:material_id]).favorites.where({user_id: current_user.id})
Material.find(params[:material_id]).favorites.where({user_id: current_user.id}).first
Material.find(params[:id]).favorites.where({user_id: current_user.id}).first
continue
Material.where(:'favorites.user_id' => current_user.id).count
Material.where(:'favorites.user_id' => current_user.id)
Material.first.favorites
Material.first.favorite
Material.first
Material
Material.favorite
Material.favorites
Material.where({'favorites.user_id' : current_user.id})
Material.where(:favorites.user_id => current_user.id)
Material.where(favorites.user_id: current_user.id)
Material.first.favorites.first.user_id
Material.first.favorites.first
Material.first.favorites
Material.first
Material.where()
Material.first
params
Material.find()
Material
User.find(current_user.id).favorites
User.find(current_user.id)
current_user.id
current_user
continue
current_user
User.find(current_user.id)
User.find()
User
continue
alreadyInFavs?(params[:material_id])
!alreadyInFavs?(params[:material_id])
continue
@material.favorites.count
@material.favorites
@material
continue
@material
continue
Material.find(params[:id]).favorites.where({user_id: current_user.id}).count
params
continue
Material.find(params[:material_id]).favorites.where({user_id: current_user.id}).count
Material.find(params[:material_id]).favorites.where({user_id: current_user.id})
continue
Material.find(params[:material_id]).favorites.where({user_id: current_user.id})
Material.find(params[:material_id]).favorites.where({user_id: current_user.id}).count
Material.find(material_id).favorites.where({user_id: current_user.id}).count
Material.find(material_id).favorites.where({user_id: current_user.id})
alreadyInFavs?(params[:material_id])
continue
alreadyInFavs?(params[:material_id])
alreadyInFavs?
continue
request.env["HTTP_X_REQUESTED_WITH"]
!request.env["HTTP_X_REQUESTED_WITH"]
request.env["HTTP_X_REQUESTED_WITH"] == false
request.env["HTTP_X_REQUESTED_WITH"] == true
request.env["HTTP_X_REQUESTED_WITH"]
continue
if request.env["HTTP_X_REQUESTED_WITH"] \n puts "hi" \n else \n puts "no" \n end
if request.env["HTTP_X_REQUESTED_WITH"] \n
if request.env["HTTP_X_REQUESTED_WITH"]
request.env["HTTP_X_REQUESTED_WITH"]
request.env["HTTP_X_REQUESTED_WITH"]?
!request.env["HTTP_X_REQUESTED_WITH"]
request.env
request
request.env["HTTP_X_REQUESTED_WITH"]
continue
request.env["HTTP_X_REQUESTED_WITH"]
request.env["HTTP_REQUESTED_WITH"]
request.env
request.env.HTTP_X_REQUESTED_WITH
request.HTTP_X_REQUESTED_WITH
request
continue
JSON.pretty_generate(JSON.parse(request))
JSON.pretty_generate(request)
JSON.pretty_generate()
JSON
request.to_yaml
request.to_yml
y request
request.pretty
request.type
request.ty√®
request.xhr?
request
request.xhr?
params[:material_id]
params
continue
params[:id]
params
continue
params[:material_id]
:material_id
continue
Material.first.user
Material.first
Material
continue
Material.first.destroy()
Material.first.drop
Material.first.drop()
Material.first.user
Material.first
Material
Materials
Material.find().first()
Material.find().first
Material
continue
byebug
Material.first.user.username
Material.first.user
Material.first
Material
Materials
current_user.id
current_user._id
current_user
current_user.id
current_user.materials
current_user.materials.first
current_user.materials.pretty()
current_user.materials.pretty)(
current_user.materials
current_user
User
continue
User.find(current_user.id)
User.find(current_user.id).count
User.find(current_user.id)
current_user.id
continue
value
key
exit
key
word
index
exit
ecit
regepxString << "hola"
regepxString =+ "hola"
regepxString += "hola"
regepxString
continue
value.split(" ").each do |index , word|
value
value.split(" ")
value
continue
Material.in(name: [ /BACHILLERATO/ ]).count
continue
Material.in(name: [ /Matriz/ ]).count
Material.in(name.split(" "): [ "Matriz" ]).count
Material.first.name.split(" ")
Material.first.name.split("")
Material.first.name
Material.in(name: [ "Matriz" ]).count
Material.in(name: [ "Matriz" ])
Material.first.name
Material.first
Material
continue
Material.where(user_id: @material.user_id).count
continue
Material.where(username: "epelaez1").count
Material.where(username: "epelaez1")
Material.find_by(username: "epelaez1")
Material.find_by(username: "epelaez1")[1]
Material.find_by(username: "epelaez1")[0]
Material.find_by(username: "epelaez1")
Material.find_by(username: "epelaez1").count()
Material.find_by(username: "epelaez1").length
Material.find_by(username: "epelaez1")
@material.username
Material.find_by()
Material.find_by().pretty()
Material.find_by()
Material.find()
Material.all
Material
User
User.username
User
Users
User
@User
@Users
continue
@material.user.avatar_file_size
@material.user.avatar_content_type
@material.user.avatar_file_name
@material.user
@material.user.avatar
@material.user.avatar[:avatar_file_size]
@material.user.avatar{
@material.user.avatar
@material.user.avatar.avatar_file_size
@material.user.avatar
@material.user
continue
!@show_video
@show_video == true
@show_video == false
@show_video
exit
continue
material.format
material.type
material
exit
params[:material][:file] === nil
params[:material][:file] == nil
params[:material]
params[:material][:file]
exit
params[:material][:file].content_type
params[:material][:file][:content_type]
params[:material][:file]
params[:material]
params["file"]
params[:file]
params
continue
@welcomePage
continue
@welcomePage
continue
!@hola
@hola
controller.request.env["PATH_INFO"]
controller.request.env[:delegate]
controller.request.env.delegate
controller.request.env
controller.request["PATH_INFO"]
controller.request.Request
controller.request.request
controller.request[0]
controller.request[:request]
controller.request[:delegate]
